name: Integracao continua e Inplantacao

on:
    push:
        branches:
            - main

    pull_request:
           types: [opened, synchronize, reopened]            

env:
    DOTNET_VERSION: '8.0.x'
    AZURE_SECRET: ${{ secrets.AZURE_WEBAPP_PUBLISH_SECRET }} # variavel de ambiente que contem o secret do Azure
    AZURE_WEBAPP_NAME: 'cleanarchdemo' # nome do WebApp no Azure
    
jobs:
    build:
        runs-on: windows-latest
        steps:

            - name: Instalando coverage
              run: dotnet tool install --global dotnet-coverage
              
            - name: Checkout para a master ‚≠ê
              uses: actions/checkout@v4.1.1
              with:
                   fetch-depth: 0


            - name: Configurando .NET Core SDK üîß
              uses: actions/setup-dotnet@v4.0.0
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Restaurando dependencias ‚è≥      
              run: dotnet restore
                
            - name: Build da aplicacao üöÄ
              run: dotnet build -c Release --no-restore      
              
            - name: Executando os Testes üß™
              run: dotnet test -c Release --no-build


            - name: Set up JDK 17 üéÉ
              uses: actions/setup-java@v3
              with:
                java-version: 17
                distribution: 'zulu' # Alternative distribution options are available.


            - name: Cache SonarCloud packages üèÅ
              uses: actions/cache@v3
              with:
                     path: ~\sonar\cache
                     key: ${{ runner.os }}-sonar
                     restore-keys: ${{ runner.os }}-sonar 

            - name: Cache SonarCloud scanner üèÅ
              id: cache-sonar-scanner
              uses: actions/cache@v3
              with:
                path: .\.sonar\scanner
                key: ${{ runner.os }}-sonar-scanner
                restore-keys: ${{ runner.os }}-sonar-scanner

            - name: Install SonarCloud scanner üõ†Ô∏è
              if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
              shell: powershell
              run: |
                New-Item -Path .\.sonar\scanner -ItemType Directory
                dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

            - name: Build and analyze üëÄ
              env:
                GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
              shell: powershell
              run: |
                .\.sonar\scanner\dotnet-sonarscanner begin /k:"CesaragsUC_clean-arch-testes-unitario-ci-cd" /o:"cesaragsuc" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml /d:sonar.qualitygate.wait=true
                  dotnet build --configuration Release
                  dotnet-coverage collect 'dotnet test' -f xml -o 'coverage.xml'
                .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

            # Triggering SonarQube analysis as results of it are required by Quality Gate check.
            - name: SonarQube Scan
              uses: sonarsource/sonarqube-scan-action@master
              env:
                SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

            # Check the Quality Gate status.
            - name: SonarQube Quality Gate check
              id: sonarqube-quality-gate-check
              uses: sonarsource/sonarqube-quality-gate-action@master
              # Force to fail step after specific time.
              timeout-minutes: 5
              env:
                 SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
                 SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }} #OPTIONAL

            # Optionally you can use the output from the Quality Gate in another step.
            # The possible outputs of the `quality-gate-status` variable are `PASSED`, `WARN` or `FAILED`.
            - name: "Example show SonarQube Quality Gate Status value"
              run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"



            ##abaixo temos as configuracoes necess√°ria para fazermos o deploy no Azure WebApp  

            # - name: Fazendo a publica√ß√£o da aplica√ß√£o üì¢
            #   run: dotnet publish -c Release -o ./publish # pasta onde a aplica√ß√£o ser√° publicada

            # - name: Fazendo deploy no Azure WebApp ‚òÅÔ∏è
            #   uses: Azure/webapps-deploy@v3.0.1
            #   with:
            #        app-name: ${{ env.AZURE_WEBAPP_NAME }}
            #        publish-profile: ${{ env.AZURE_SECRET }}
            #        package: ./publish # pasta onde a aplicacao foi publicada
